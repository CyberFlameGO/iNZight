on: [push, pull_request]

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: windows-latest, r: "4.1", cache-version: 1 }
          - { os: windows-latest, r: "4.2", cache-version: 1 }
          - { os: windows-latest, r: "4.3", cache-version: 1 }
          - { os: windows-latest, r: "4.4", cache-version: 1 }
          - {
              os: ubuntu-20.04,
              r: "release",
              rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest",
              cache-version: 3,
            }

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.config.os }}-${{ matrix.config.r }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          use-public-rspm: true
          extra-repositories: "https://r.docker.stat.auckland.ac.nz"

      - name: Check version number
        run: |
          desc <- read.dcf("DESCRIPTION")
          v <- strsplit(desc[1, "Version"], ".")[[1]]
          if (length(v) < 3) {
            stop("Version number must have at least 3 components")
          }
        shell: Rscript {0}

      # - name: Install gtk binaries, and RGtk2 from source if needed
      #   if: runner.os == 'Windows'
      #   uses: coactions/setup-xvfb@v1
      #   with:
      #     run: ./.github/install_gtk.cmd

      - name: Install GTK
        if: runner.os == 'Windows'
        uses: tmelliott/install-gtk2@main

      - name: Add GTK x64 to PATH
        if: runner.os == 'Windows'
        run: echo "D:\a\_temp\gtk\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install system dependencies
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
        run: |
          sudo apt install libgtk2.0-dev xorg-dev libxml2-dev libnlopt-dev libcurl4-openssl-dev

      - uses: ./.github/actions/install
        name: Install package and dependencies
        # env:
        #   GTK_PATH: ${{ runner.os == 'Windows' && '"D:/a/_temp/gtk"' || '' }}
        with:
          cache-version: ${{ matrix.config.cache  }}
          # extra packages based on R version
          extra-packages: ${{ matrix.config.r == '4.1' && 'cran/MatrixModels@0.5-0' || '' }}
          packages: "deps::., any::sessioninfo, iNZightModules=?ignore, ."
          needs: |
            check
            dependencies
          install-pandoc: true

      - name: Finalise GTK installation
        if: runner.os == 'Windows'
        run: ./.github/finalise_gtk.cmd

      - name: Check RGtk2
        uses: coactions/setup-xvfb@v1
        with:
          shell: Rscript {0}
          run: Rscript ./.github/check_rgtk2.R

      - name: Create iNZightVIT directory
        if: runner.os == 'Windows'
        run: try(dir.create(file.path("~", "Documents", "iNZightVIT"), recursive = TRUE))
        shell: Rscript {0}

      - uses: ./.github/actions/check
        name: Check package

      - name: Download
        if: failure() && runner.os == 'Windows' && matrix.config.r == '4.4'
        run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
      - name: Extract
        if: failure() && runner.os == 'Windows' && matrix.config.r == '4.4'
        run: Expand-Archive ngrok.zip
      - name: Auth
        if: failure() && runner.os == 'Windows' && matrix.config.r == '4.4'
        run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      - name: Enable TS
        if: failure() && runner.os == 'Windows' && matrix.config.r == '4.4'
        run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
      - run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        if: failure() && runner.os == 'Windows' && matrix.config.r == '4.4'
      - run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
        if: failure() && runner.os == 'Windows' && matrix.config.r == '4.4'
      - run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
        if: failure() && runner.os == 'Windows' && matrix.config.r == '4.4'
      - name: Create Tunnel
        if: failure() && runner.os == 'Windows' && matrix.config.r == '4.4'
        run: .\ngrok\ngrok.exe tcp 3389

      # - name: Check
      #   uses: coactions/setup-xvfb@v1
      #   env:
      #     _R_CHECK_CRAN_INCOMING_REMOTE_: false
      #   with:
      #     run: Rscript -e "rcmdcheck::rcmdcheck(args = c('--no-manual', '--no-multiarch'), error_on = 'warning', check_dir = 'check')"

      # - name: Upload check results
      #   if: failure()
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: ${{ matrix.config.os }}-r${{ matrix.config.r }}-results
      #     path: check
